{"ast":null,"code":"/*\nimport axios from \"axios\";\nimport logger from \"use-reducer-logger\";\nimport { getError } from \"../util\";\nimport Product from \"../components/Product\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useReducer } from \"react\";\nimport { useEffect } from \"react\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport { Helmet } from \"react-helmet-async\";\nimport LoadingBox from \"../components/LoadingBox\";\nimport MessageBox from \"../components/MessageBox\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"FETCH_REQUEST\":\n      return { ...state, loading: true };\n    case \"FETCH_SUCCESS\":\n      return { ...state, product: action.payload, loading: false };\n    case \"FETCH_FAIL\":\n      return { ...state, loading: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default function AislePage() {\n  const params = useParams();\n  const { slug } = params;\n  const navigate = useNavigate();\n\n  const [{ loading, error, products }, dispatch] = useReducer(\n    logger(reducer),\n    {\n      products: [],\n      loading: true,\n      error: \"\",\n    }\n  );\n\n\n  useEffect(() => {\n    const fetchProd = async () => {\n      dispatch({ type: \"FETCH_REQUEST\" });\n      try {\n        const result = await axios.get(\"/api/products\");\n        dispatch({ type: \"FETCH_SUCCESS\", payload: result.data });\n      } catch (err) {\n        dispatch({ type: \"FETCH_FAIL\", payload: getError(err) });\n      }\n    };\n    fetchProd();\n  }, []);\n\n\n  return (\n    <>\n      <Helmet>\n        <title>DarkRiver</title>\n      </Helmet>\n      <Container fluid=\"xxl\">\n        <h1>{slug}</h1>\n        <h1>under construction</h1>\n        <div className=\"fproducts\">\n          {loading ? (\n            <LoadingBox />\n          ) : error ? (\n            <MessageBox variant=\"danger\">{error}</MessageBox>\n          ) : (\n            <Row>\n              {products.map((product) => (\n                <Col key={product.slug} sm={6} md={4} lg={3} className=\"mb-3\">\n                  <Product product={product}></Product>\n                </Col>\n              ))}\n            </Row>\n          )}\n        </div>\n\n      </Container>\n    </>\n  );\n}*/","map":{"version":3,"names":[],"sources":["/Users/notAdmin/Documents/dev/Webdev/udemy/react-grocery/notamazon/frontend/src/screens/AislePage.js"],"sourcesContent":["/*\nimport axios from \"axios\";\nimport logger from \"use-reducer-logger\";\nimport { getError } from \"../util\";\nimport Product from \"../components/Product\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useReducer } from \"react\";\nimport { useEffect } from \"react\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport { Helmet } from \"react-helmet-async\";\nimport LoadingBox from \"../components/LoadingBox\";\nimport MessageBox from \"../components/MessageBox\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"FETCH_REQUEST\":\n      return { ...state, loading: true };\n    case \"FETCH_SUCCESS\":\n      return { ...state, product: action.payload, loading: false };\n    case \"FETCH_FAIL\":\n      return { ...state, loading: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default function AislePage() {\n  const params = useParams();\n  const { slug } = params;\n  const navigate = useNavigate();\n\n  const [{ loading, error, products }, dispatch] = useReducer(\n    logger(reducer),\n    {\n      products: [],\n      loading: true,\n      error: \"\",\n    }\n  );\n\n\n  useEffect(() => {\n    const fetchProd = async () => {\n      dispatch({ type: \"FETCH_REQUEST\" });\n      try {\n        const result = await axios.get(\"/api/products\");\n        dispatch({ type: \"FETCH_SUCCESS\", payload: result.data });\n      } catch (err) {\n        dispatch({ type: \"FETCH_FAIL\", payload: getError(err) });\n      }\n    };\n    fetchProd();\n  }, []);\n\n\n  return (\n    <>\n      <Helmet>\n        <title>DarkRiver</title>\n      </Helmet>\n      <Container fluid=\"xxl\">\n        <h1>{slug}</h1>\n        <h1>under construction</h1>\n        <div className=\"fproducts\">\n          {loading ? (\n            <LoadingBox />\n          ) : error ? (\n            <MessageBox variant=\"danger\">{error}</MessageBox>\n          ) : (\n            <Row>\n              {products.map((product) => (\n                <Col key={product.slug} sm={6} md={4} lg={3} className=\"mb-3\">\n                  <Product product={product}></Product>\n                </Col>\n              ))}\n            </Row>\n          )}\n        </div>\n\n      </Container>\n    </>\n  );\n}*/\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}