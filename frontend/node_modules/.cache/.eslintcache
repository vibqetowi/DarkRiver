[{"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/index.js":"1","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/reportWebVitals.js":"2","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/App.js":"3","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/Store.js":"4","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/SellerPage.js":"5","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/HomePage.js":"6","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/ProductPage.js":"7","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/ShippingPage.js":"8","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/PaymentMethodPage.js":"9","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/SignupPage.js":"10","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/OrderDetailsPage.js":"11","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/LoginPage.js":"12","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/CartPage.js":"13","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/AboutPage.js":"14","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/UserProfilePage.js":"15","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/OrderHistoryPage.js":"16","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/utils.js":"17","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/components/MessageBox.js":"18","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/components/Rating.js":"19","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/components/CheckoutSteps.js":"20","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/components/LoadingBox.js":"21","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/components/Product.js":"22","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/components/SearchBox.js":"23","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/SearchResultsPage.js":"24","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/CheckoutPage.js":"25","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/UnderConstruction.js":"26","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/components/ProtectedRoute.js":"27","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/components/AdminRoute.js":"28"},{"size":929,"mtime":1653250797373,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1653249194873,"results":"31","hashOfConfig":"30"},{"size":14407,"mtime":1653280370653,"results":"32","hashOfConfig":"30"},{"size":2391,"mtime":1653249194871,"results":"33","hashOfConfig":"30"},{"size":189,"mtime":1653249194875,"results":"34","hashOfConfig":"30"},{"size":2121,"mtime":1653249536149,"results":"35","hashOfConfig":"30"},{"size":12554,"mtime":1653278541305,"results":"36","hashOfConfig":"30"},{"size":3880,"mtime":1653249194875,"results":"37","hashOfConfig":"30"},{"size":2365,"mtime":1653264611820,"results":"38","hashOfConfig":"30"},{"size":3457,"mtime":1653249194875,"results":"39","hashOfConfig":"30"},{"size":10992,"mtime":1653271759425,"results":"40","hashOfConfig":"30"},{"size":2790,"mtime":1653276564793,"results":"41","hashOfConfig":"30"},{"size":7306,"mtime":1653279221574,"results":"42","hashOfConfig":"30"},{"size":255,"mtime":1653249194873,"results":"43","hashOfConfig":"30"},{"size":3498,"mtime":1653249194875,"results":"44","hashOfConfig":"30"},{"size":3385,"mtime":1653276485139,"results":"45","hashOfConfig":"30"},{"size":150,"mtime":1653249194875,"results":"46","hashOfConfig":"30"},{"size":166,"mtime":1653249194872,"results":"47","hashOfConfig":"30"},{"size":1797,"mtime":1653274927307,"results":"48","hashOfConfig":"30"},{"size":484,"mtime":1653249194872,"results":"49","hashOfConfig":"30"},{"size":237,"mtime":1653249194872,"results":"50","hashOfConfig":"30"},{"size":2123,"mtime":1653275039493,"results":"51","hashOfConfig":"30"},{"size":1108,"mtime":1653279609754,"results":"52","hashOfConfig":"30"},{"size":9934,"mtime":1653274610490,"results":"53","hashOfConfig":"30"},{"size":7699,"mtime":1653275851486,"results":"54","hashOfConfig":"30"},{"size":196,"mtime":1653276315427,"results":"55","hashOfConfig":"30"},{"size":306,"mtime":1653279673699,"results":"56","hashOfConfig":"30"},{"size":322,"mtime":1653280380196,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},"16curo4",{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"70"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/index.js",["150"],[],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createRoot } from 'react-dom/client';\nimport { HelmetProvider } from \"react-helmet-async\";\nimport { PayPalScriptProvider } from \"@paypal/react-paypal-js\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { StoreProvider } from \"./Store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreProvider>\n      <HelmetProvider>\n        <PayPalScriptProvider deferLoading={true}>\n          <App />\n        </PayPalScriptProvider>\n      </HelmetProvider>\n    </StoreProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/reportWebVitals.js",[],[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/App.js",["151","152","153","154","155","156"],[],"import {\n  Badge,\n  Button,\n  Container,\n  Nav,\n  Navbar,\n  NavDropdown,\n} from \"react-bootstrap\";\nimport { BrowserRouter, Routes, Route, Link } from \"react-router-dom\";\nimport HomePage from \"./screens/HomePage\";\nimport ProductPage from \"./screens/ProductPage\";\nimport CartPage from \"./screens/CartPage\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { Store } from \"./Store\";\nimport { useContext } from \"react\";\nimport SellerPage from \"./screens/SellerPage\";\nimport LoginPage from \"./screens/LoginPage\";\nimport ShippingPage from \"./screens/ShippingPage\";\nimport SignupPage from \"./screens/SignupPage\";\nimport PaymentMethodPage from \"./screens/PaymentMethodPage\";\nimport AboutPage from \"./screens/AboutPage\";\nimport OrderPage from \"./screens/CheckoutPage\";\nimport OrderDetailsPage from \"./screens/OrderDetailsPage\";\nimport OrderHistoryPage from \"./screens/OrderHistoryPage\";\nimport UserProfilePage from \"./screens/UserProfilePage\";\nimport { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { getError } from \"./utils\";\nimport { useState } from \"react\";\nimport SearchBox from \"./components/SearchBox\";\nimport SearchResultsPage from \"./screens/SearchResultsPage\";\nimport UnderConstruction from \"./screens/UnderConstruction\";\nimport ProtectedRoute from \"./components/ProtectedRoute\";\nimport AdminRoute from \"./components/AdminRoute\";\n\nfunction App() {\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { cart, userInfo } = state;\n\n  const signoutHandler = () => {\n    ctxDispatch({ type: \"USER_SIGNOUT\" });\n    localStorage.removeItem(\"userInfo\");\n    localStorage.removeItem(\"shippingAddress\");\n    localStorage.removeItem(\"paymentMethod\");\n    window.location.href = \"/login\";\n  };\n\n  const [sidebarIsOpen, setSidebarIsOpen] = useState(false);\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    const fetchCategories = async () => {\n      try {\n        const { data } = await axios.get(`/api/products/categories`);\n        setCategories(data);\n      } catch (err) {\n        toast.error(getError(err));\n      }\n    };\n    fetchCategories();\n  }, []);\n\n  return (\n    <>\n      <BrowserRouter>\n        <div\n          className=\"d-flex flex-column site-container\"\n          onClick={sidebarIsOpen ? () => setSidebarIsOpen(false) : null}\n          id={sidebarIsOpen ? \"greyed-out\" : null}\n        >\n          <header>\n            <Navbar bg=\"black\" variant=\"dark\" expand=\"md\" className=\"topbar\">\n              <Container>\n                <LinkContainer to=\"/\">\n                  <Navbar.Brand>\n                    <span className=\"logo\">\n                      <p>D</p>\n                      <i className=\"fa-brands fa-amazon\" />\n                      <p>rk</p> <p className=\"d-hub\">River</p>\n                    </span>\n                  </Navbar.Brand>\n                </LinkContainer>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                  <SearchBox />\n                  <Nav className=\"me-auto justify-content-end\">\n                    {userInfo ? (\n                      <>\n                        {\" \"}\n                        <LinkContainer to=\"/order/history\">\n                          <Button variant=\"returns-and-orders\">\n                            <div className=\"one-line-when-collapse-parent\">\n                              <div className=\"one-line-when-collapse-child\">\n                                Returns&nbsp; <br />\n                              </div>\n                              <div className=\"one-line-when-collapse-child\">\n                                <h6>\n                                  <b> &amp;Orders</b>\n                                </h6>\n                              </div>\n                            </div>\n                          </Button>\n                        </LinkContainer>\n                        <NavDropdown\n                          title={userInfo.name}\n                          id=\"basic-nav-dropdown\"\n                          className=\"user-info-dropdown\"\n                        >\n                          <LinkContainer to=\"/profile\">\n                            <NavDropdown.Item>User Profile</NavDropdown.Item>\n                          </LinkContainer>\n                          <NavDropdown.Divider />\n                          <Link\n                            className=\"dropdown-item\"\n                            to=\"#signout\"\n                            onClick={signoutHandler}\n                          >\n                            Sign Out\n                          </Link>\n                        </NavDropdown>\n                      </>\n                    ) : (\n                      <>\n                        {\" \"}\n                        <LinkContainer to=\"/login\">\n                          <Button variant=\"returns-and-orders\">\n                            <div className=\"one-line-when-collapse-parent\">\n                              <div className=\"one-line-when-collapse-child\">\n                                Returns&nbsp; <br />\n                              </div>\n                              <div className=\"one-line-when-collapse-child\">\n                                <h6>\n                                  <b> &amp;Orders</b>\n                                </h6>\n                              </div>\n                            </div>\n                          </Button>\n                        </LinkContainer>\n                        <Link className=\"nav-link\" to=\"/login\">\n                          <Button variant=\"hello-sign-in\">\n                            <div className=\"one-line-when-collapse-parent\">\n                              <div className=\"one-line-when-collapse-child\">\n                                <div className=\"one-line-parent\">\n                                  <div className=\"one-line-child\">\n                                    {\" \"}\n                                    Hello, Sign in &nbsp;{\" \"}\n                                  </div>\n                                </div>\n                              </div>\n                              <div className=\"one-line-when-collapse-child\">\n                                <div className=\"one-line-parent\">\n                                  <div className=\"one-line-child\">\n                                    {\" \"}\n                                    <h6>\n                                      <b>Account &amp; Lists</b>\n                                    </h6>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </Button>\n                        </Link>\n                      </>\n                    )}\n                    {userInfo && userInfo.isAdmin && (\n                      <NavDropdown title=\"Admin\" id=\"admin-nav-dropdown\">\n                        <LinkContainer to=\"/admin/dashboard\">\n                          <NavDropdown.Item>Dashboard</NavDropdown.Item>\n                        </LinkContainer>\n                        <LinkContainer to=\"/admin/products\">\n                          <NavDropdown.Item>Products</NavDropdown.Item>\n                        </LinkContainer>\n                        <LinkContainer to=\"/admin/orders\">\n                          <NavDropdown.Item>Orders</NavDropdown.Item>\n                        </LinkContainer>\n                        <LinkContainer to=\"/admin/users\">\n                          <NavDropdown.Item>Users</NavDropdown.Item>\n                        </LinkContainer>\n                      </NavDropdown>\n                    )}\n                    <Link to=\"/cart\" className=\"nav-link\">\n                      <div className=\"cart-logo-container\">\n                        <div className=\"one-line-child\">\n                          {\" \"}\n                          <h6>Cart &nbsp;</h6>\n                        </div>\n                        <div className=\"one-line-child\">\n                          {\" \"}\n                          <i\n                            className=\"fa fa-shopping-cart\"\n                            aria-hidden=\"true\"\n                          ></i>\n                          {cart.cartItems.length > 0 && (\n                            <Badge pill bg=\"warning\">\n                              {cart.cartItems.reduce(\n                                (a, c) => a + c.quantity,\n                                0\n                              )}\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    </Link>\n                  </Nav>\n                </Navbar.Collapse>\n              </Container>\n              <Button\n                variant=\"sidebar-toggle\"\n                onClick={() => setSidebarIsOpen(!sidebarIsOpen)}\n              >\n                <i className=\"fas fa-bars\"></i> All\n              </Button>\n              <Link to=\"/underConstruction\" className=\"navbar-prime-link\">\n                Prime\n              </Link>\n              <Link\n                to=\"/underConstruction\"\n                className=\"navbar-best-sellers-link\"\n              >\n                Best Sellers\n              </Link>\n            </Navbar>{\" \"}\n          </header>\n          <div\n            id=\"hideMe\"\n            className={\n              sidebarIsOpen\n                ? \"active-nav side-navbar d-flex justify-content-between flex-wrap flex-column\"\n                : \"side-navbar d-flex justify-content-between flex-wrap flex-column\"\n            }\n          >\n            <Nav className=\"flex-column text-white w-100 p-2\">\n              <Nav.Item>\n                <br></br>\n                <strong>Categories</strong>\n              </Nav.Item>\n              {categories.map((category) => (\n                <Nav.Item key={category}>\n                  <LinkContainer\n                    to={`/search?category=${category}`}\n                    onClick={() => setSidebarIsOpen(false)}\n                    className=\"normal-ass-white-txt\"\n                  >\n                    <Nav.Link>{category}</Nav.Link>\n                  </LinkContainer>\n                </Nav.Item>\n              ))}\n            </Nav>\n          </div>\n          <main>\n            <div className=\"center-contents\">\n              <div className=\"disclaimer\">\n                <div className=\"center-contents\">\n                  <span>\n                    <Link to=\"/about\" className=\"not-real-site-txt\">\n                      This is not a real website, read more in our about page\n                    </Link>{\" \"}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <Container>\n              <Routes>\n                <Route path=\"/\" element={<HomePage />} />\n                <Route path=\"/cart\" element={<CartPage />} />\n                <Route path=\"/dp/:slug\" element={<ProductPage />} />\n                <Route path=\"/seller/:brand\" element={<SellerPage />} />\n                <Route path=\"/login\" element={<LoginPage />} />\n                <Route path=\"/shipping\" element={<ShippingPage />} />\n                <Route path=\"/signup\" element={<SignupPage />} />\n                <Route path=\"/payment\" element={<PaymentMethodPage />} />\n                <Route path=\"/about\" element={<AboutPage />} />\n                <Route path=\"/checkout\" element={<OrderPage />} />\n                <Route\n                  path=\"/order/:id\"\n                  element={\n                    <ProtectedRoute>\n                      <OrderDetailsPage />\n                    </ProtectedRoute>\n                  }\n                ></Route>\n                <Route\n                  path=\"/order/history\"\n                  element={\n                    <ProtectedRoute>\n                      <OrderHistoryPage />\n                    </ProtectedRoute>\n                  }\n                ></Route>\n                <Route\n                  path=\"/profile\"\n                  element={\n                    <ProtectedRoute>\n                      <UserProfilePage />\n                    </ProtectedRoute>\n                  }\n                />\n\n                <Route path=\"/search\" element={<SearchResultsPage />} />\n                <Route\n                  path=\"/underConstruction\"\n                  element={<UnderConstruction />}\n                />\n\n                {/* Admin Routes */}\n                <Route\n                  path=\"/admin/dashboard\"\n                  element={\n                    <AdminRoute>\n                      <DashboardScreen />\n                    </AdminRoute>\n                  }\n                ></Route>\n                <Route\n                  path=\"/admin/orders\"\n                  element={\n                    <AdminRoute>\n                      <OrderListScreen />\n                    </AdminRoute>\n                  }\n                ></Route>\n                <Route\n                  path=\"/admin/users\"\n                  element={\n                    <AdminRoute>\n                      <UserListScreen />\n                    </AdminRoute>\n                  }\n                ></Route>\n                <Route\n                  path=\"/admin/products\"\n                  element={\n                    <AdminRoute>\n                      <ProductListScreen />\n                    </AdminRoute>\n                  }\n                ></Route>\n                <Route\n                  path=\"/admin/product/:id\"\n                  element={\n                    <AdminRoute>\n                      <ProductEditScreen />\n                    </AdminRoute>\n                  }\n                ></Route>\n                <Route\n                  path=\"/admin/user/:id\"\n                  element={\n                    <AdminRoute>\n                      <UserEditScreen />\n                    </AdminRoute>\n                  }\n                ></Route>\n              </Routes>\n            </Container>\n          </main>\n          <footer>\n            <br></br>\n            {/* <h1 className=\"square-logo\">DR</h1> */}\n\n            <div className=\"text-center\">\n              <p className=\"copyright-txt\">\n                {\" \"}\n                &#169; Not for commercial use, Amazon might sue us all\n              </p>\n            </div>\n          </footer>\n        </div>\n      </BrowserRouter>\n    </>\n  );\n}\n\nexport default App;\n",[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/Store.js",[],[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/SellerPage.js",[],[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/HomePage.js",[],[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/ProductPage.js",["157"],[],"import axios from \"axios\";\nimport { useContext, useEffect, useReducer, useRef, useState } from \"react\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Form from \"react-bootstrap/Form\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport Rating from \"../components/Rating\";\nimport { Helmet } from \"react-helmet-async\";\nimport LoadingBox from \"../components/LoadingBox\";\nimport MessageBox from \"../components/MessageBox\";\nimport { getError } from \"../utils\";\nimport { Store } from \"../Store\";\nimport FloatingLabel from \"react-bootstrap/FloatingLabel\";\nimport { toast } from \"react-toastify\";\nimport { Container } from \"react-bootstrap\";\nimport { ListGroupItem } from \"react-bootstrap\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"REFRESH_PRODUCT\":\n      return { ...state, product: action.payload };\n    case \"CREATE_REQUEST\":\n      return { ...state, loadingCreateReview: true };\n    case \"CREATE_SUCCESS\":\n      return { ...state, loadingCreateReview: false };\n    case \"CREATE_FAIL\":\n      return { ...state, loadingCreateReview: false };\n    case \"FETCH_REQUEST\":\n      return { ...state, loading: true };\n    case \"FETCH_SUCCESS\":\n      return { ...state, product: action.payload, loading: false };\n    case \"FETCH_FAIL\":\n      return { ...state, loading: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default function ProductPage() {\n  let reviewsRef = useRef();\n\n  const [rating, setRating] = useState(0);\n  const [comment, setComment] = useState(\"\");\n  const [selectedImage, setSelectedImage] = useState(\"\");\n\n  const navigate = useNavigate();\n  const params = useParams();\n  const { slug } = params;\n\n  const [{ loading, error, product, loadingCreateReview }, dispatch] =\n    useReducer(reducer, {\n      product: [],\n      loading: true,\n      error: \"\",\n    });\n  useEffect(() => {\n    const fetchData = async () => {\n      dispatch({ type: \"FETCH_REQUEST\" });\n      try {\n        const result = await axios.get(`/api/products/slug/${slug}`);\n        dispatch({ type: \"FETCH_SUCCESS\", payload: result.data });\n      } catch (err) {\n        dispatch({ type: \"FETCH_FAIL\", payload: getError(err) });\n      }\n    };\n    fetchData();\n  }, [slug]);\n\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { cart, userInfo } = state;\n  const addToCartHandler = async () => {\n    const existItem = cart.cartItems.find((x) => x._id === product._id);\n    const quantity = existItem ? existItem.quantity + 1 : 1;\n    const { data } = await axios.get(`/api/products/${product._id}`);\n    if (data.countInStock < quantity) {\n      window.alert(\"Sorry. Product is out of stock\");\n      return;\n    }\n    ctxDispatch({\n      type: \"CART_ADD_ITEM\",\n      payload: { ...product, quantity },\n    });\n    navigate(\"/cart\");\n  };\n\n  const submitHandler = async (e) => {\n    e.preventDefault();\n    if (!comment || !rating) {\n      toast.error(\"Please enter comment and rating\");\n      return;\n    }\n    try {\n      const { data } = await axios.post(\n        `/api/products/${product._id}/reviews`,\n        { rating, comment, name: userInfo.name },\n        {\n          headers: { Authorization: `Bearer ${userInfo.token}` },\n        }\n      );\n\n      dispatch({\n        type: \"CREATE_SUCCESS\",\n      });\n      toast.success(\"Review submitted successfully\");\n      product.reviews.unshift(data.review);\n      product.numReviews = data.numReviews;\n      product.rating = data.rating;\n      dispatch({ type: \"REFRESH_PRODUCT\", payload: product });\n      window.scrollTo({\n        behavior: \"smooth\",\n        top: reviewsRef.current.offsetTop,\n      });\n    } catch (error) {\n      toast.error(getError(error));\n      dispatch({ type: \"CREATE_FAIL\" });\n    }\n  };\n  return loading ? (\n    <LoadingBox />\n  ) : error ? (\n    <MessageBox variant=\"danger\">{error}</MessageBox>\n  ) : (\n    <Container fluid className=\"rounded-border-black-bg\">\n      <Row>\n        <Col md={4}>\n          <img\n            className=\"img-large\"\n            src={selectedImage || product.image}\n            alt={product.name}\n          ></img>\n          <p>image gallery pending implementation</p>\n        </Col>\n        <Col md={5}>\n          <ListGroup variant=\"flush\">\n            <ListGroup.Item className=\"black-bg\">\n              <Helmet>\n                <title>{product.name}</title>\n              </Helmet>\n              <h1>{product.name}</h1>\n              <Link className=\"turquoise\" to={`/seller/${product.brand}`}>\n                <h6>Visit the {product.brand} store</h6>\n              </Link>\n            </ListGroup.Item>\n            <ListGroup.Item className=\"black-bg\">\n              <div className=\"one-line-parent\">\n                <div className=\"one-line-child\">\n                  <Rating rating={product.rating}></Rating>{\" \"}\n                </div>\n                <div className=\"one-line-child\">\n                  <p className=\"turquoise\">\n                    &nbsp;{product.numReviews} ratings\n                  </p>\n                </div>\n              </div>\n            </ListGroup.Item>\n            <ListGroup.Item className=\"black-bg\">\n              Price :<h3 className=\"colored-price\">&nbsp;${product.price}</h3>\n              <br></br> &amp;{\" \"}\n              <a\n                className=\"turquoise\"\n                href=\"https://www.amazon.com/gp/help/customer/display.html?nodeId=GNW5VKFXMF72FFMR\"\n              >\n                {\" \"}\n                Free Returns, most of the time{\" \"}\n              </a>\n            </ListGroup.Item>\n            <ListGroup.Item className=\"black-bg\">\n              <p>option selector (ex:size) pending implementation</p>\n            </ListGroup.Item>\n            <ListGroup.Item className=\"black-bg\">\n              Description:\n              <p>{product.description}</p>\n            </ListGroup.Item>\n          </ListGroup>\n        </Col>\n        <Col md={3}>\n          <Card className=\"black-bg\">\n            <Card.Body className=\"black-bg\">\n              <ListGroup variant=\"flush\">\n                <ListGroup.Item className=\"black-bg\">\n                  <Row>\n                    {\" \"}\n                    <div className=\"one-line-parent\">\n                      <div className=\"one-line-child\">\n                        {\" \"}\n                        <a\n                          href=\"https://www.amazon.com/gp/help/customer/display.html?nodeId=GGE5X8EV7VNVTK6R\"\n                          className=\"turquoise\"\n                        >\n                          FREE delivery&nbsp;\n                        </a>\n                      </div>\n                      {product.price > 35 ? null : (\n                        <>\n                          {\" \"}\n                          <div className=\"one-line-child\"> on</div>\n                          <br></br> orders above 35$\n                        </>\n                      )}\n                    </div>\n                  </Row>\n                  <br></br>\n                  <Row>\n                    {\" \"}\n                    <Col>Price:</Col>\n                    <Col>${product.price}</Col>\n                  </Row>\n                </ListGroup.Item>\n                <ListGroup.Item className=\"black-bg\">\n                  <Row>\n                    <Col>\n                      {product.countInStock > 0 ? (\n                        <Badge bg=\"success\">In Stock</Badge>\n                      ) : (\n                        <Badge bg=\"danger\">Unavailable</Badge>\n                      )}\n                    </Col>\n                  </Row>\n                </ListGroup.Item>\n\n                {product.countInStock > 0 && (\n                  <ListGroup.Item className=\"black-bg\">\n                    <div className=\"d-grid\">\n                      <Button onClick={addToCartHandler} variant=\"amzn\">\n                        Add to Cart\n                      </Button>\n                    </div>\n                  </ListGroup.Item>\n                )}\n\n                <ListGroupItem className=\"black-bg\">\n                  <div className=\"one-line-parent\">\n                    <div className=\"one-line-child\">\n                      <i className=\"fa fa-lock\"></i>\n                    </div>\n                    <div className=\"one-line-child\">\n                      <a\n                        href=\"https://www.amazon.com/gp/help/customer/display.html?nodeId=201909010\"\n                        className=\"turquoise\"\n                      >\n                        &nbsp; Secure transaction\n                      </a>\n                    </div>\n                  </div>\n                </ListGroupItem>\n                <ListGroupItem className=\"black-bg\">\n                  <div className=\"one-line-parent\">\n                    <div className=\"one-line-child\">Sold by &nbsp;</div>\n                    <div className=\"one-line-child\">\n                      {\" \"}\n                      <Link\n                        className=\"turquoise\"\n                        to={`/seller/${product.brand}`}\n                      >\n                        <h6>{product.brand}</h6>\n                      </Link>{\" \"}\n                    </div>\n                  </div>\n                  <div className=\"one-line-parent\">\n                    <div className=\"one-line-child\">\n                      and fulfilled by &nbsp;\n                    </div>\n                    <div className=\"one-line-child\">\n                      {\" \"}\n                      <Link className=\"turquoise\" to=\"/\">\n                        <h6>DarkRiver</h6>\n                      </Link>{\" \"}\n                    </div>\n                  </div>\n                </ListGroupItem>\n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        {\" \"}\n        <Col md={4}>\n          <p>review distribution pending implementation</p>\n        </Col>\n        <Col md={8}>\n          <h2 ref={reviewsRef}>Reviews</h2>\n          <div className=\"my-3\">\n            {userInfo ? (\n              <form onSubmit={submitHandler}>\n                <h3>Write a review</h3>\n                <Form.Group className=\"mb-3\" controlId=\"rating\">\n                  <Form.Label>Rating</Form.Label>\n                  <Form.Select\n                    aria-label=\"Rating\"\n                    value={rating}\n                    onChange={(e) => setRating(e.target.value)}\n                  >\n                    <option value=\"\">Select...</option>\n                    <option value=\"1\">1- Poor</option>\n                    <option value=\"2\">2- Fair</option>\n                    <option value=\"3\">3- Good</option>\n                    <option value=\"4\">4- Very good</option>\n                    <option value=\"5\">5- Excelent</option>\n                  </Form.Select>\n                </Form.Group>\n                <FloatingLabel\n                  controlId=\"floatingTextarea\"\n                  label=\"Comments\"\n                  className=\"mb-3\"\n                >\n                  <Form.Control\n                    as=\"textarea\"\n                    placeholder=\"Leave a comment here\"\n                    value={comment}\n                    onChange={(e) => setComment(e.target.value)}\n                  />\n                </FloatingLabel>\n\n                <div className=\"mb-3\">\n                  <Button disabled={loadingCreateReview} type=\"submit\">\n                    Submit\n                  </Button>\n                  {loadingCreateReview && <LoadingBox></LoadingBox>}\n                </div>\n              </form>\n            ) : (\n              <MessageBox>\n                Please{\" \"}\n                <Link to={`/login?redirect=/dp/${product.slug}`}>Sign In</Link>{\" \"}\n                to write a review\n              </MessageBox>\n            )}\n          </div>\n          <div className=\"mb-3\">\n            {product.reviews.length === 0 && (\n              <MessageBox>No reviews</MessageBox>\n            )}\n          </div>\n          <ListGroup>\n            {product.reviews.map((review) => (\n              <ListGroup.Item key={review._id}>\n                <strong>{review.name}</strong>\n                <Rating rating={review.rating} caption=\" \"></Rating>\n                <p>{review.createdAt.substring(0, 10)}</p>\n                <p>{review.comment}</p>\n              </ListGroup.Item>\n            ))}\n          </ListGroup>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/ShippingPage.js",[],[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/PaymentMethodPage.js",[],[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/SignupPage.js",[],[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/OrderDetailsPage.js",[],[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/LoginPage.js",["158"],[],"import Axios from \"axios\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Store } from \"../Store\";\nimport { getError } from \"../utils\";\nimport { toast } from \"react-toastify\";\n\nexport default function LoginPage() {\n  const navigate = useNavigate();\n  const { search } = useLocation();\n  const redirectInUrl = new URLSearchParams(search).get(\"redirect\");\n  const redirect = redirectInUrl ? redirectInUrl : \"/\";\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { userInfo } = state;\n  const submitHandler = async (e) => {\n    e.preventDefault();\n    try {\n      const { data } = await Axios.post(\"/api/users/login\", {\n        email,\n        password,\n      });\n      console.log(data);\n      ctxDispatch({ type: \"USER_SIGNIN\", payload: data });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      navigate(redirect || \"/\");\n    } catch (err) {\n      alert(getError(err));\n    }\n  };\n\n  useEffect(() => {\n    if (userInfo) {\n      navigate(redirect);\n    }\n  }, [navigate, redirect, userInfo]);\n\n  return (\n    <Container fluid className=\"rounded-border-black-bg-small\">\n      <Helmet>\n        <title>Sign In</title>\n      </Helmet>\n      <h1 className=\"my-3\">Sign In</h1>\n      <Form onSubmit={submitHandler}>\n        <Form.Group className=\"mb-3\" controlId=\"email\">\n          <Form.Label>Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            required\n            onChange={(e) => setEmail(e.target.value)}\n          />\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"password\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            required\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </Form.Group>\n        <div className=\"mb-3\">\n          <div className=\"center-contents\">\n            <Button type=\"submit\" variant=\"yellow-black-txt-wide\">\n              Sign In\n            </Button>\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          New customer?{\" \"}\n          <Link to={`/signup?redirect=${redirect}`} className=\"amzn-link \">\n            Create your account\n          </Link>\n        </div>\n      </Form>\n      <br></br>\n      <p>Customer demo: johndoe@dmail.com, psw:jd123456</p>\n      <p>Admin demo: admin@darkriver.com, psw:123456 (under construction)</p>\n      <p>seller menu pending implementation</p>\n    </Container>\n  );\n}\n","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/CartPage.js",[],[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/AboutPage.js",[],[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/UserProfilePage.js",["159","160","161"],[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/OrderHistoryPage.js",["162"],[],"import React, { useContext, useEffect, useReducer } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport axios from \"axios\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport LoadingBox from \"../components/LoadingBox\";\nimport MessageBox from \"../components/MessageBox\";\nimport { Store } from \"../Store\";\nimport { getError } from \"../utils\";\nimport Button from \"react-bootstrap/esm/Button\";\nimport { Container } from \"react-bootstrap\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"FETCH_REQUEST\":\n      return { ...state, loading: true };\n    case \"FETCH_SUCCESS\":\n      return { ...state, orders: action.payload, loading: false };\n    case \"FETCH_FAIL\":\n      return { ...state, loading: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default function OrderHistoryPage() {\n  const { state } = useContext(Store);\n  const { userInfo } = state;\n  const navigate = useNavigate();\n\n  const [{ loading, error, orders }, dispatch] = useReducer(reducer, {\n    loading: true,\n    error: \"\",\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      dispatch({ type: \"FETCH_REQUEST\" });\n      try {\n        const { data } = await axios.get(\n          `/api/orders/mine`,\n\n          { headers: { Authorization: `Bearer ${userInfo.token}` } }\n        );\n        dispatch({ type: \"FETCH_SUCCESS\", payload: data });\n      } catch (error) {\n        dispatch({\n          type: \"FETCH_FAIL\",\n          payload: getError(error),\n        });\n      }\n    };\n    fetchData();\n  }, [userInfo]);\n  return (\n    <>\n      <Helmet>\n        <title>Order History</title>\n      </Helmet>\n\n      <h1>Under construction</h1>\n      <div className=\"rounded-border-black-bg\">\n        <h1>Order History</h1>\n        {loading ? (\n          <LoadingBox></LoadingBox>\n        ) : error ? (\n          <MessageBox variant=\"danger\">not logged in</MessageBox>\n        ) : (\n          <table className=\"table\">\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>DATE</th>\n                <th>TOTAL</th>\n                <th>PAID</th>\n                <th>DELIVERED</th>\n                <th>ACTIONS</th>\n              </tr>\n            </thead>\n            <tbody>\n              {orders.map((order) => (\n                <tr key={order._id}>\n                  <td>\n                    <Link to={`/order/${order._id}`} className=\"turquoise\">\n                      {\" \"}\n                      #{order._id}\n                    </Link>\n                  </td>\n                  <td>{order.createdAt.substring(0, 10)}</td>\n                  <td>{order.totalPrice.toFixed(2)}</td>\n                  <td>{order.isPaid ? order.paidAt.substring(0, 10) : \"No\"}</td>\n                  <td>\n                    {order.isDelivered\n                      ? order.deliveredAt.substring(0, 10)\n                      : \"No\"}\n                  </td>\n                  <td>\n                    <Button\n                      type=\"button\"\n                      variant=\"amzn\"\n                      onClick={() => {\n                        navigate(`/order/${order._id}`);\n                      }}\n                    >\n                      Details\n                    </Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n    </>\n  );\n}\n","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/utils.js",[],[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/components/MessageBox.js",[],[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/components/Rating.js",[],[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/components/CheckoutSteps.js",[],[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/components/LoadingBox.js",[],[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/components/Product.js",[],[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/components/SearchBox.js",[],[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/SearchResultsPage.js",[],[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/CheckoutPage.js",["163"],[],"import Axios from 'axios';\nimport React, { useContext, useEffect, useReducer } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { toast } from 'react-toastify';\nimport { Store } from '../Store';\nimport CheckoutSteps from '../components/CheckoutSteps';\nimport LoadingBox from '../components/LoadingBox';\nimport { getError } from '../utils';\nimport { Container } from 'react-bootstrap';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CREATE_REQUEST':\n      return { ...state, loading: true };\n    case 'CREATE_SUCCESS':\n      return { ...state, loading: false };\n    case 'CREATE_FAIL':\n      return { ...state, loading: false };\n    default:\n      return state;\n  }\n};\n\nexport default function Checkout() {\n  const navigate = useNavigate();\n\n  const [{ loading }, dispatch] = useReducer(reducer, {\n    loading: false,\n  });\n\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { cart, userInfo } = state;\n\n  const round2 = (num) => Math.round(num * 100 + Number.EPSILON) / 100; // 123.2345 => 123.23\n  cart.itemsPrice = round2(\n    cart.cartItems.reduce((a, c) => a + c.quantity * c.price, 0)\n  );\n  cart.shippingPrice = cart.itemsPrice >= 35 ? round2(0) : round2(10);\n  cart.taxPrice = round2(0.15 * cart.itemsPrice);\n  cart.totalPrice = cart.itemsPrice + cart.shippingPrice + cart.taxPrice;\n\n  const placeOrderHandler = async () => {\n    try {\n      dispatch({ type: 'CREATE_REQUEST' });\n\n      const { data } = await Axios.post(\n        '/api/orders',\n        {\n          orderItems: cart.cartItems,\n          shippingAddress: cart.shippingAddress,\n          paymentMethod: cart.paymentMethod,\n          itemsPrice: cart.itemsPrice,\n          shippingPrice: cart.shippingPrice,\n          taxPrice: cart.taxPrice,\n          totalPrice: cart.totalPrice,\n        },\n        {\n          headers: {\n            authorization: `Bearer ${userInfo.token}`,\n          },\n        }\n      );\n      ctxDispatch({ type: 'CART_CLEAR' });\n      dispatch({ type: 'CREATE_SUCCESS' });\n      localStorage.removeItem('cartItems');\n      navigate(`/order/${data.order._id}`);\n    } catch (err) {\n      dispatch({ type: 'CREATE_FAIL' });\n      alert.error(getError(err));\n    }\n  };\n\n  useEffect(() => {\n    if (!cart.paymentMethod) {\n      navigate('/payment');\n    }\n  }, [cart, navigate]);\n\n  return (\n    <div>\n      <CheckoutSteps step1 step2 step3 step4></CheckoutSteps>\n      <Helmet>\n        <title>Checkout</title>\n      </Helmet>\n      <Container fluid className=\"place-order-parent\">\n        <h1 className=\"my-3\" style={{ padding: \"1rem\" }}>\n          Checkout\n        </h1>\n        <Row>\n          <Col md={8}>\n            <Card className=\"black-bg\" style={{ margin: \"1rem\" }}>\n              <Card.Body>\n                <Card.Title>Shipping</Card.Title>\n                <Card.Text>\n                  <strong>Name:</strong> {cart.shippingAddress.fullName} <br />\n                  <strong>Address: </strong> {cart.shippingAddress.address},\n                  {cart.shippingAddress.city}, {cart.shippingAddress.postalCode}\n                  ,{cart.shippingAddress.country}\n                </Card.Text>\n                <Link to=\"/shipping\" className=\"amzn-link\">\n                  Edit\n                </Link>\n              </Card.Body>\n            </Card>\n            <Card className=\"black-bg\" style={{ margin: \"1rem\" }}>\n              <Card.Body>\n                <Card.Title>Payment</Card.Title>\n                <Card.Text>\n                  <strong>Method:</strong> {cart.paymentMethod}\n                </Card.Text>\n                <Link to=\"/payment\" className=\"amzn-link\">\n                  Edit\n                </Link>\n              </Card.Body>\n            </Card>\n\n            <Card className=\"black-bg\" style={{ margin: \"1rem\" }}>\n              <Card.Body>\n                <Card.Title>Items</Card.Title>\n                <ListGroup variant=\"flush\">\n                  {cart.cartItems.map((item) => (\n                    <ListGroup.Item className=\"black-bg\" key={item._id}>\n                      <Row className=\"align-items-center\">\n                        <Col md={6}>\n                          <Link\n                            className=\"normal-ass-white-txt\"\n                            to={`/dp/${item.slug}`}\n                          >\n                            <img\n                              src={item.image}\n                              alt={item.name}\n                              className=\"thumbnail\"\n                            ></img>{\" \"}\n                            {item.name}\n                          </Link>\n                        </Col>\n                        <Col md={3}>\n                          <span className=\"normal-ass-white-txt\">\n                            {item.quantity}\n                          </span>\n                        </Col>\n                        <Col md={3} className=\"normal-ass-white-txt\">\n                          ${item.price}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n                <Link to=\"/cart\" className=\"amzn-link\">\n                  Edit\n                </Link>\n              </Card.Body>\n            </Card>\n          </Col>\n          <Col md={4}>\n            <Card className=\"black-bg\" style={{ margin: \"1rem\" }}>\n              <Card.Body>\n                <Card.Title>Order Summary</Card.Title>\n                <ListGroup variant=\"flush\">\n                  <ListGroup.Item className=\"black-bg\">\n                    <Row className=\"normal-ass-white-txt\">\n                      <Col>Items</Col>\n                      <Col>${cart.itemsPrice.toFixed(2)}</Col>\n                    </Row>\n                  </ListGroup.Item>\n                  <ListGroup.Item className=\"black-bg\">\n                    <Row className=\"normal-ass-white-txt\">\n                      <Col>Shipping</Col>\n                      <Col>${cart.shippingPrice.toFixed(2)}</Col>\n                    </Row>\n                  </ListGroup.Item>\n                  <ListGroup.Item className=\"black-bg\">\n                    <Row className=\"normal-ass-white-txt\">\n                      <Col>Tax</Col>\n                      <Col>${cart.taxPrice.toFixed(2)}</Col>\n                    </Row>\n                  </ListGroup.Item>\n                  <ListGroup.Item className=\"black-bg\">\n                    <Row className=\"normal-ass-white-txt\">\n                      <Col>\n                        <strong> Order Total</strong>\n                      </Col>\n                      <Col>\n                        <strong>${cart.totalPrice.toFixed(2)}</strong>\n                      </Col>\n                    </Row>\n                  </ListGroup.Item>\n                  <ListGroup.Item className=\"black-bg\">\n                    <div className=\"d-grid\">\n                      <Button\n                        type=\"button\"\n                        onClick={placeOrderHandler}\n                        disabled={cart.cartItems.length === 0}\n                        variant=\"yellow-black-txt\"\n                      >\n                        Place Order\n                      </Button>\n                    </div>\n                    {loading && <LoadingBox></LoadingBox>}\n                  </ListGroup.Item>\n                </ListGroup>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n","/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/screens/UnderConstruction.js",[],[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/components/ProtectedRoute.js",[],[],"/Users/notAdmin/Documents/rand/DarkRiver/frontend/src/components/AdminRoute.js",[],[],{"ruleId":"164","severity":1,"message":"165","line":3,"column":10,"nodeType":"166","messageId":"167","endLine":3,"endColumn":20},{"ruleId":"168","severity":2,"message":"169","line":311,"column":24,"nodeType":"170","messageId":"171","endLine":311,"endColumn":39},{"ruleId":"168","severity":2,"message":"172","line":319,"column":24,"nodeType":"170","messageId":"171","endLine":319,"endColumn":39},{"ruleId":"168","severity":2,"message":"173","line":327,"column":24,"nodeType":"170","messageId":"171","endLine":327,"endColumn":38},{"ruleId":"168","severity":2,"message":"174","line":335,"column":24,"nodeType":"170","messageId":"171","endLine":335,"endColumn":41},{"ruleId":"168","severity":2,"message":"175","line":343,"column":24,"nodeType":"170","messageId":"171","endLine":343,"endColumn":41},{"ruleId":"168","severity":2,"message":"176","line":351,"column":24,"nodeType":"170","messageId":"171","endLine":351,"endColumn":38},{"ruleId":"164","severity":1,"message":"177","line":48,"column":25,"nodeType":"166","messageId":"167","endLine":48,"endColumn":41},{"ruleId":"164","severity":1,"message":"178","line":10,"column":10,"nodeType":"166","messageId":"167","endLine":10,"endColumn":15},{"ruleId":"164","severity":1,"message":"178","line":9,"column":10,"nodeType":"166","messageId":"167","endLine":9,"endColumn":15},{"ruleId":"164","severity":1,"message":"179","line":31,"column":10,"nodeType":"166","messageId":"167","endLine":31,"endColumn":25},{"ruleId":"164","severity":1,"message":"180","line":33,"column":12,"nodeType":"166","messageId":"167","endLine":33,"endColumn":25},{"ruleId":"164","severity":1,"message":"181","line":10,"column":10,"nodeType":"166","messageId":"167","endLine":10,"endColumn":19},{"ruleId":"164","severity":1,"message":"178","line":10,"column":10,"nodeType":"166","messageId":"167","endLine":10,"endColumn":15},"no-unused-vars","'createRoot' is defined but never used.","Identifier","unusedVar","react/jsx-no-undef","'DashboardScreen' is not defined.","JSXIdentifier","undefined","'OrderListScreen' is not defined.","'UserListScreen' is not defined.","'ProductListScreen' is not defined.","'ProductEditScreen' is not defined.","'UserEditScreen' is not defined.","'setSelectedImage' is assigned a value but never used.","'toast' is defined but never used.","'confirmPassword' is assigned a value but never used.","'loadingUpdate' is assigned a value but never used.","'Container' is defined but never used."]