[{"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/index.js":"1","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/App.js":"2","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/Store.js":"3","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/reportWebVitals.js":"4","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/HomePage.js":"5","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/AislePage.js":"6","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/ProductPage.js":"7","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/SellerPage.js":"8","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/SignupPage.js":"9","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/CartPage.js":"10","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/AboutPage.js":"11","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/PaymentMethodPage.js":"12","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/ShippingPage.js":"13","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/LoginPage.js":"14","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/OrderDetailsPage.js":"15","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/Product.js":"16","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/LoadingBox.js":"17","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/Rating.js":"18","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/MessageBox.js":"19","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/Aisle.js":"20","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/CheckoutSteps.js":"21","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/utils.js":"22","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/Checkout.js":"23","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/OrderHistoryPage.js":"24","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/UserProfilePage.js":"25"},{"size":882,"mtime":1653147785531,"results":"26","hashOfConfig":"27"},{"size":8245,"mtime":1653176692479,"results":"28","hashOfConfig":"27"},{"size":2391,"mtime":1653076990394,"results":"29","hashOfConfig":"27"},{"size":362,"mtime":1653076990418,"results":"30","hashOfConfig":"27"},{"size":3178,"mtime":1653136103668,"results":"31","hashOfConfig":"27"},{"size":2298,"mtime":1653164104311,"results":"32","hashOfConfig":"27"},{"size":5957,"mtime":1653076990427,"results":"33","hashOfConfig":"27"},{"size":189,"mtime":1653076990427,"results":"34","hashOfConfig":"27"},{"size":3457,"mtime":1653155110455,"results":"35","hashOfConfig":"27"},{"size":6824,"mtime":1653176392091,"results":"36","hashOfConfig":"27"},{"size":255,"mtime":1653076990418,"results":"37","hashOfConfig":"27"},{"size":2302,"mtime":1653076990427,"results":"38","hashOfConfig":"27"},{"size":3880,"mtime":1653155090646,"results":"39","hashOfConfig":"27"},{"size":2742,"mtime":1653176039372,"results":"40","hashOfConfig":"27"},{"size":11124,"mtime":1653156707315,"results":"41","hashOfConfig":"27"},{"size":1758,"mtime":1653076990405,"results":"42","hashOfConfig":"27"},{"size":237,"mtime":1653076990396,"results":"43","hashOfConfig":"27"},{"size":1785,"mtime":1653076990406,"results":"44","hashOfConfig":"27"},{"size":166,"mtime":1653076990405,"results":"45","hashOfConfig":"27"},{"size":572,"mtime":1653076990394,"results":"46","hashOfConfig":"27"},{"size":484,"mtime":1653076990395,"results":"47","hashOfConfig":"27"},{"size":150,"mtime":1653076990437,"results":"48","hashOfConfig":"27"},{"size":7721,"mtime":1653147249747,"results":"49","hashOfConfig":"27"},{"size":3242,"mtime":1653164824071,"results":"50","hashOfConfig":"27"},{"size":3498,"mtime":1653173916650,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"orqic6",{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"87"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"55"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"72"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/index.js",[],[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/App.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/Store.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/reportWebVitals.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/HomePage.js",[],[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/AislePage.js",[],[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/ProductPage.js",["137","138"],[],"import axios from \"axios\";\nimport { useContext, useEffect, useReducer } from \"react\";\nimport {\n  Badge,\n  Button,\n  Card,\n  Col,\n  Container,\n  ListGroup,\n  Row,\n} from \"react-bootstrap\";\nimport { Link, Navigate, useNavigate, useParams } from \"react-router-dom\";\nimport Rating from \"../components/Rating\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Store } from \"../Store\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"FETCH_REQUEST\":\n      return { ...state, loading: true };\n    case \"FETCH_SUCCESS\":\n      return { ...state, product: action.payload, loading: false };\n    case \"FETCH_FAIL\":\n      return { ...state, loading: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default function ProductPage() {\n  const params = useParams();\n  const { slug } = params;\n  const navigate = useNavigate();\n\n  const [{ loading, error, product }, dispatch] = useReducer(reducer, {\n    product: [],\n    loading: true,\n    error: \"\",\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      dispatch({ type: \"FETCH_REQUEST\" });\n      try {\n        const result = await axios.get(`/api/products/slug/${slug}`);\n        dispatch({ type: \"FETCH_SUCCESS\", payload: result.data });\n      } catch (err) {\n        dispatch({ type: \"FETCH_FAIL\", payload: err.message });\n      }\n    };\n    fetchData();\n  }, [slug]);\n\n  const { state, dispatch: tba } = useContext(Store);\n  const { cart } = state;\n  const addToCartHandler = async () => {\n    const existItem = cart.cartItems.find((x) => x._id === product._id);\n    const quantity = existItem ? existItem.quantity + 1 : 1;\n    const { data } = await axios.get(`/api/products/${product._id}`);\n    if (data.countInStock < quantity) {\n      window.alert(\"Sorry. Product is out of stock\");\n      return;\n    }\n    tba({\n      type: \"CART_ADD_ITEM\",\n      payload: { ...product, quantity },\n    });\n  };\n\n  return loading ? (\n    <div>Loading...</div>\n  ) : error ? (\n    <div>{error}</div>\n  ) : (\n    <div className=\"prod-page-div\">\n      {\" \"}\n      <Container fluid className=\"rounded-border-black-bg\">\n        <Helmet>\n          <title>{product.slug}</title>\n        </Helmet>\n\n        <Row>\n          <Col xl={4} className=\"rounded-border-black-bg\">\n            <img\n              className=\"img-large\"\n              src={product.image}\n              alt={product.name}\n            ></img>\n          </Col>\n\n          <Col xl={5} className=\"rounded-border-black-bg\">\n            <ListGroup variant=\"flush\">\n              <ListGroup.Item className=\"black-bg\">\n                <Link\n                  className=\"normal-ass-white-txt\"\n                  to={`/seller/${product.brand}`}\n                >\n                  Brand: {product.brand}\n                </Link>\n                <h1 className=\"prod-txt\">{product.name}</h1>\n              </ListGroup.Item>\n              <ListGroup.Item className=\"black-bg\">\n                <span>\n                  <p className=\"one-line\">\n                    <Rating\n                      rating={product.rating}\n                      numRatings={product.numRatings}\n                    ></Rating>\n                  </p>\n                </span>\n              </ListGroup.Item>\n              <ListGroup.Item className=\"black-bg\">\n                <p className=\"one-line\">Price : ${product.price}</p>\n                <a\n                  rel=\"noreferrer\"\n                  target=\"_blank\"\n                  className=\"amzn-link\"\n                  href=\"https://www.amazon.com/gp/help/customer/display.html?nodeId=202075130\"\n                >\n                  &nbsp; &#38;Free Returns on some sizes and colours\n                </a>\n              </ListGroup.Item>\n              <ListGroup.Item className=\"black-bg\">\n                <p id=\"p-wrap\">\n                  {\" \"}\n                  Description:<br></br>\n                  {product.description}\n                </p>\n              </ListGroup.Item>\n            </ListGroup>\n          </Col>\n\n          <Col xl={3} className=\"rounded-border-black-bg\">\n            <Card className=\"black-bg\">\n              <Card.Body>\n                <ListGroup variant=\"flush\">\n                  <ListGroup.Item className=\"black-bg\">\n                    <Row>\n                      <Col>\n                        <p>Price: </p>\n                      </Col>\n                      <Col>\n                        <p>${product.price} </p>{\" \"}\n                      </Col>\n                    </Row>\n                  </ListGroup.Item>\n                  <ListGroup.Item className=\"black-bg\">\n                    <Row>\n                      <Col>\n                        <p>Status:</p>\n                      </Col>\n                      <Col>\n                        {product.countInStock > 0 ? (\n                          <Badge bg=\"success\">In Stock</Badge>\n                        ) : (\n                          <Badge bg=\"danger\">Unavailable</Badge>\n                        )}\n                      </Col>\n                    </Row>\n                  </ListGroup.Item>\n\n                  {product.countInStock > 0 && (\n                    <ListGroup.Item className=\"black-bg\">\n                      <div className=\"d-grid\">\n                        <Button\n                          variant=\"yellow-black-txt\"\n                          onClick={addToCartHandler}\n                        >\n                          Add to Cart\n                        </Button>\n                        <Button variant=\"yellow-black-txt\">\n                          <Link to=\"/cart\" className=\"normal-ass-black-txt\">\n                            {\" \"}\n                            View Cart\n                          </Link>\n                        </Button>\n                      </div>\n                    </ListGroup.Item>\n                  )}\n                </ListGroup>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/SellerPage.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/SignupPage.js",[],[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/CartPage.js",[],[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/AboutPage.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/PaymentMethodPage.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/ShippingPage.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/LoginPage.js",["139"],[],"import Axios from \"axios\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Store } from \"../Store\";\nimport { getError } from \"../utils\";\nimport { toast } from \"react-toastify\";\n\nexport default function LoginPage() {\n  const navigate = useNavigate();\n  const { search } = useLocation();\n  const redirectInUrl = new URLSearchParams(search).get(\"redirect\");\n  const redirect = redirectInUrl ? redirectInUrl : \"/\";\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { userInfo } = state;\n  const submitHandler = async (e) => {\n    e.preventDefault();\n    try {\n      const { data } = await Axios.post(\"/api/users/login\", {\n        email,\n        password,\n      });\n      console.log(data);\n      ctxDispatch({ type: \"USER_SIGNIN\", payload: data });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      navigate(redirect || \"/\");\n    } catch (err) {\n      alert(getError(err));\n    }\n  };\n\n  useEffect(() => {\n    if (userInfo) {\n      navigate(redirect);\n    }\n  }, [navigate, redirect, userInfo]);\n\n  return (\n    <Container fluid className=\"rounded-border-black-bg-small\">\n      <Helmet>\n        <title>Sign In</title>\n      </Helmet>\n      <h1 className=\"my-3\">Sign In</h1>\n      <Form onSubmit={submitHandler}>\n        <Form.Group className=\"mb-3\" controlId=\"email\">\n          <Form.Label>Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            required\n            onChange={(e) => setEmail(e.target.value)}\n          />\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"password\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            required\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </Form.Group>\n        <div className=\"mb-3\">\n          <div className=\"center-contents\">\n            <Button type=\"submit\" variant=\"yellow-black-txt-wide\">\n              Sign In\n            </Button>\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          New customer?{\" \"}\n          <Link to={`/signup?redirect=${redirect}`} className=\"amzn-link \">\n            Create your account\n          </Link>\n        </div>\n      </Form>\n      <br></br>\n      <p>Customer demo: johndoe@dmail.com, psw:jd123456</p>\n      <p>Admin demo: admin@darkriver.com, psw:123456 (under construction)</p>\n    </Container>\n  );\n}\n","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/OrderDetailsPage.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/Product.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/LoadingBox.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/Rating.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/MessageBox.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/Aisle.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/CheckoutSteps.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/utils.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/Checkout.js",["140"],[],"import Axios from 'axios';\nimport React, { useContext, useEffect, useReducer } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { toast } from 'react-toastify';\nimport { Store } from '../Store';\nimport CheckoutSteps from '../components/CheckoutSteps';\nimport LoadingBox from '../components/LoadingBox';\nimport { getError } from '../utils';\nimport { Container } from 'react-bootstrap';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CREATE_REQUEST':\n      return { ...state, loading: true };\n    case 'CREATE_SUCCESS':\n      return { ...state, loading: false };\n    case 'CREATE_FAIL':\n      return { ...state, loading: false };\n    default:\n      return state;\n  }\n};\n\nexport default function Checkout() {\n  const navigate = useNavigate();\n\n  const [{ loading }, dispatch] = useReducer(reducer, {\n    loading: false,\n  });\n\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { cart, userInfo } = state;\n\n  const round2 = (num) => Math.round(num * 100 + Number.EPSILON) / 100; // 123.2345 => 123.23\n  cart.itemsPrice = round2(\n    cart.cartItems.reduce((a, c) => a + c.quantity * c.price, 0)\n  );\n  cart.shippingPrice = cart.itemsPrice >= 35 ? round2(0) : round2(10);\n  cart.taxPrice = round2(0.15 * cart.itemsPrice);\n  cart.totalPrice = cart.itemsPrice + cart.shippingPrice + cart.taxPrice;\n\n  const placeOrderHandler = async () => {\n    try {\n      dispatch({ type: 'CREATE_REQUEST' });\n\n      const { data } = await Axios.post(\n        '/api/orders',\n        {\n          orderItems: cart.cartItems,\n          shippingAddress: cart.shippingAddress,\n          paymentMethod: cart.paymentMethod,\n          itemsPrice: cart.itemsPrice,\n          shippingPrice: cart.shippingPrice,\n          taxPrice: cart.taxPrice,\n          totalPrice: cart.totalPrice,\n        },\n        {\n          headers: {\n            authorization: `Bearer ${userInfo.token}`,\n          },\n        }\n      );\n      ctxDispatch({ type: 'CART_CLEAR' });\n      dispatch({ type: 'CREATE_SUCCESS' });\n      localStorage.removeItem('cartItems');\n      navigate(`/order/${data.order._id}`);\n    } catch (err) {\n      dispatch({ type: 'CREATE_FAIL' });\n      alert.error(getError(err));\n    }\n  };\n\n  useEffect(() => {\n    if (!cart.paymentMethod) {\n      navigate('/payment');\n    }\n  }, [cart, navigate]);\n\n  return (\n    <div>\n      <CheckoutSteps step1 step2 step3 step4></CheckoutSteps>\n      <Helmet>\n        <title>Checkout</title>\n      </Helmet>\n      <Container fluid className=\"place-order-parent\">\n        <h1 className=\"my-3\" style={{ padding: \"1rem\" }}>\n          Checkout\n        </h1>\n        <Row>\n          <Col md={8}>\n            <Card className=\"black-bg\" style={{ margin: \"1rem\" }}>\n              <Card.Body>\n                <Card.Title>Shipping</Card.Title>\n                <Card.Text>\n                  <strong>Name:</strong> {cart.shippingAddress.fullName} <br />\n                  <strong>Address: </strong> {cart.shippingAddress.address},\n                  {cart.shippingAddress.city}, {cart.shippingAddress.postalCode}\n                  ,{cart.shippingAddress.country}\n                </Card.Text>\n                <Link to=\"/shipping\" className=\"amzn-link\">\n                  Edit\n                </Link>\n              </Card.Body>\n            </Card>\n            <Card className=\"black-bg\" style={{ margin: \"1rem\" }}>\n              <Card.Body>\n                <Card.Title>Payment</Card.Title>\n                <Card.Text>\n                  <strong>Method:</strong> {cart.paymentMethod}\n                </Card.Text>\n                <Link to=\"/payment\" className=\"amzn-link\">\n                  Edit\n                </Link>\n              </Card.Body>\n            </Card>\n\n            <Card className=\"black-bg\" style={{ margin: \"1rem\" }}>\n              <Card.Body>\n                <Card.Title>Items</Card.Title>\n                <ListGroup variant=\"flush\">\n                  {cart.cartItems.map((item) => (\n                    <ListGroup.Item className=\"black-bg\" key={item._id}>\n                      <Row className=\"align-items-center\">\n                        <Col md={6}>\n                          <Link\n                            className=\"normal-ass-white-txt\"\n                            to={`/dp/${item.slug}`}\n                          >\n                            <img\n                              src={item.image}\n                              alt={item.name}\n                              className=\"img-fluid rounded img-thumbnail\"\n                            ></img>{\" \"}\n                            {item.name}\n                          </Link>\n                        </Col>\n                        <Col md={3}>\n                          <span className=\"normal-ass-white-txt\">\n                            {item.quantity}\n                          </span>\n                        </Col>\n                        <Col md={3} className=\"normal-ass-white-txt\">\n                          ${item.price}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n                <Link to=\"/cart\" className=\"amzn-link\">\n                  Edit\n                </Link>\n              </Card.Body>\n            </Card>\n          </Col>\n          <Col md={4}>\n            <Card className=\"black-bg\" style={{ margin: \"1rem\" }}>\n              <Card.Body>\n                <Card.Title>Order Summary</Card.Title>\n                <ListGroup variant=\"flush\">\n                  <ListGroup.Item className=\"black-bg\">\n                    <Row className=\"normal-ass-white-txt\">\n                      <Col>Items</Col>\n                      <Col>${cart.itemsPrice.toFixed(2)}</Col>\n                    </Row>\n                  </ListGroup.Item>\n                  <ListGroup.Item className=\"black-bg\">\n                    <Row className=\"normal-ass-white-txt\">\n                      <Col>Shipping</Col>\n                      <Col>${cart.shippingPrice.toFixed(2)}</Col>\n                    </Row>\n                  </ListGroup.Item>\n                  <ListGroup.Item className=\"black-bg\">\n                    <Row className=\"normal-ass-white-txt\">\n                      <Col>Tax</Col>\n                      <Col>${cart.taxPrice.toFixed(2)}</Col>\n                    </Row>\n                  </ListGroup.Item>\n                  <ListGroup.Item className=\"black-bg\">\n                    <Row className=\"normal-ass-white-txt\">\n                      <Col>\n                        <strong> Order Total</strong>\n                      </Col>\n                      <Col>\n                        <strong>${cart.totalPrice.toFixed(2)}</strong>\n                      </Col>\n                    </Row>\n                  </ListGroup.Item>\n                  <ListGroup.Item className=\"black-bg\">\n                    <div className=\"d-grid\">\n                      <Button\n                        type=\"button\"\n                        onClick={placeOrderHandler}\n                        disabled={cart.cartItems.length === 0}\n                        variant=\"yellow-black-txt\"\n                      >\n                        Place Order\n                      </Button>\n                    </div>\n                    {loading && <LoadingBox></LoadingBox>}\n                  </ListGroup.Item>\n                </ListGroup>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/OrderHistoryPage.js",["141"],[],"import React, { useContext, useEffect, useReducer } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport LoadingBox from \"../components/LoadingBox\";\nimport MessageBox from \"../components/MessageBox\";\nimport { Store } from \"../Store\";\nimport { getError } from \"../utils\";\nimport Button from \"react-bootstrap/esm/Button\";\nimport { Container } from \"react-bootstrap\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"FETCH_REQUEST\":\n      return { ...state, loading: true };\n    case \"FETCH_SUCCESS\":\n      return { ...state, orders: action.payload, loading: false };\n    case \"FETCH_FAIL\":\n      return { ...state, loading: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default function OrderHistoryPage() {\n  const { state } = useContext(Store);\n  const { userInfo } = state;\n  const navigate = useNavigate();\n\n  const [{ loading, error, orders }, dispatch] = useReducer(reducer, {\n    loading: true,\n    error: \"\",\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      dispatch({ type: \"FETCH_REQUEST\" });\n      try {\n        const { data } = await axios.get(\n          `/api/orders/mine`,\n\n          { headers: { Authorization: `Bearer ${userInfo.token}` } }\n        );\n        dispatch({ type: \"FETCH_SUCCESS\", payload: data });\n      } catch (error) {\n        dispatch({\n          type: \"FETCH_FAIL\",\n          payload: getError(error),\n        });\n      }\n    };\n    fetchData();\n  }, [userInfo]);\n  return (\n    <>\n      <Helmet>\n        <title>Order History</title>\n      </Helmet>\n\n      <h1>Under construction</h1>\n      <h2>Issue: not responsive</h2>\n      <div className=\"rounded-border-black-bg\">\n        <h1>Order History</h1>\n        {loading ? (\n          <LoadingBox></LoadingBox>\n        ) : error ? (\n          <MessageBox variant=\"danger\">not logged in</MessageBox>\n        ) : (\n          <table className=\"table\">\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>DATE</th>\n                <th>TOTAL</th>\n                <th>PAID</th>\n                <th>DELIVERED</th>\n                <th>ACTIONS</th>\n              </tr>\n            </thead>\n            <tbody>\n              {orders.map((order) => (\n                <tr key={order._id}>\n                  <td>{order._id}</td>\n                  <td>{order.createdAt.substring(0, 10)}</td>\n                  <td>{order.totalPrice.toFixed(2)}</td>\n                  <td>{order.isPaid ? order.paidAt.substring(0, 10) : \"No\"}</td>\n                  <td>\n                    {order.isDelivered\n                      ? order.deliveredAt.substring(0, 10)\n                      : \"No\"}\n                  </td>\n                  <td>\n                    <Button\n                      type=\"button\"\n                      variant=\"light\"\n                      onClick={() => {\n                        navigate(`/order/${order._id}`);\n                      }}\n                    >\n                      Details\n                    </Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n    </>\n  );\n}\n","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/UserProfilePage.js",["142","143","144"],[],"import React, { useContext, useReducer, useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { Store } from \"../Store\";\nimport { getError } from \"../utils\";\nimport axios from \"axios\";\nimport { Container } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"UPDATE_REQUEST\":\n      return { ...state, loadingUpdate: true };\n    case \"UPDATE_SUCCESS\":\n      return { ...state, loadingUpdate: false };\n    case \"UPDATE_FAIL\":\n      return { ...state, loadingUpdate: false };\n\n    default:\n      return state;\n  }\n};\n\nexport default function UserProfilePage() {\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { userInfo } = state;\n  const [name, setName] = useState(userInfo.name);\n  const [email, setEmail] = useState(userInfo.email);\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n  const [{ loadingUpdate }, dispatch] = useReducer(reducer, {\n    loadingUpdate: false,\n  });\n\n  const submitHandler = async (e) => {\n    e.preventDefault();\n    try {\n      const { data } = await axios.put(\n        \"/api/users/profile\",\n        {\n          name,\n          email,\n          password,\n        },\n        {\n          headers: { Authorization: `Bearer ${userInfo.token}` },\n        }\n      );\n      dispatch({\n        type: \"UPDATE_SUCCESS\",\n      });\n      ctxDispatch({ type: \"USER_SIGNIN\", payload: data });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      alert.success(\"User updated successfully\");\n    } catch (err) {\n      dispatch({\n        type: \"FETCH_FAIL\",\n      });\n      alert.error(getError(err));\n    }\n  };\n\n  return (\n    <Container fluid className=\"max-width-800px\">\n      <Helmet>\n        <title>User Profile</title>\n      </Helmet>\n      <div className=\"shipping-menu\">\n        {\" \"}\n        <h1 className=\"my-3\">User Profile</h1>\n        <form onSubmit={submitHandler}>\n          <Form.Group className=\"mb-3\" controlId=\"name\">\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              required\n            />\n          </Form.Group>\n          <Form.Group className=\"mb-3\" controlId=\"name\">\n            <Form.Label>Email</Form.Label>\n            <Form.Control\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n            />\n          </Form.Group>\n          <Form.Group className=\"mb-3\" controlId=\"password\">\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              onChange={(e) => setPassword(e.target.value)}\n            />\n          </Form.Group>\n          <Form.Group className=\"mb-3\" controlId=\"password\">\n            <Form.Label>Confirm Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              onChange={(e) => setConfirmPassword(e.target.value)}\n            />\n          </Form.Group>\n          <div className=\"mb-3\">\n            <div className=\"center-contents\">\n              {\" \"}\n              <Button variant=\"yellow-black-txt-wide\" type=\"submit\">\n                Update\n              </Button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </Container>\n  );\n}\n",{"ruleId":"145","severity":1,"message":"146","line":12,"column":16,"nodeType":"147","messageId":"148","endLine":12,"endColumn":24},{"ruleId":"145","severity":1,"message":"149","line":33,"column":9,"nodeType":"147","messageId":"148","endLine":33,"endColumn":17},{"ruleId":"145","severity":1,"message":"150","line":10,"column":10,"nodeType":"147","messageId":"148","endLine":10,"endColumn":15},{"ruleId":"145","severity":1,"message":"150","line":10,"column":10,"nodeType":"147","messageId":"148","endLine":10,"endColumn":15},{"ruleId":"145","severity":1,"message":"151","line":10,"column":10,"nodeType":"147","messageId":"148","endLine":10,"endColumn":19},{"ruleId":"145","severity":1,"message":"150","line":9,"column":10,"nodeType":"147","messageId":"148","endLine":9,"endColumn":15},{"ruleId":"145","severity":1,"message":"152","line":31,"column":10,"nodeType":"147","messageId":"148","endLine":31,"endColumn":25},{"ruleId":"145","severity":1,"message":"153","line":33,"column":12,"nodeType":"147","messageId":"148","endLine":33,"endColumn":25},"no-unused-vars","'Navigate' is defined but never used.","Identifier","unusedVar","'navigate' is assigned a value but never used.","'toast' is defined but never used.","'Container' is defined but never used.","'confirmPassword' is assigned a value but never used.","'loadingUpdate' is assigned a value but never used."]