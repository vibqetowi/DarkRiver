[{"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/index.js":"1","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/App.js":"2","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/Store.js":"3","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/reportWebVitals.js":"4","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/HomePage.js":"5","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/AislePage.js":"6","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/ProductPage.js":"7","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/SellerPage.js":"8","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/SignupPage.js":"9","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/CartPage.js":"10","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/AboutPage.js":"11","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/PaymentMethodPage.js":"12","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/ShippingPage.js":"13","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/LoginPage.js":"14","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/OrderDetailsPage.js":"15","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/Product.js":"16","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/LoadingBox.js":"17","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/Rating.js":"18","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/MessageBox.js":"19","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/Aisle.js":"20","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/CheckoutSteps.js":"21","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/utils.js":"22","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/Checkout.js":"23"},{"size":882,"mtime":1653147785531,"results":"24","hashOfConfig":"25"},{"size":5468,"mtime":1653156012423,"results":"26","hashOfConfig":"25"},{"size":2391,"mtime":1653076990394,"results":"27","hashOfConfig":"25"},{"size":362,"mtime":1653076990418,"results":"28","hashOfConfig":"25"},{"size":3178,"mtime":1653136103668,"results":"29","hashOfConfig":"25"},{"size":2250,"mtime":1653135503721,"results":"30","hashOfConfig":"25"},{"size":5957,"mtime":1653076990427,"results":"31","hashOfConfig":"25"},{"size":189,"mtime":1653076990427,"results":"32","hashOfConfig":"25"},{"size":3457,"mtime":1653155110455,"results":"33","hashOfConfig":"25"},{"size":6915,"mtime":1653155085128,"results":"34","hashOfConfig":"25"},{"size":255,"mtime":1653076990418,"results":"35","hashOfConfig":"25"},{"size":2302,"mtime":1653076990427,"results":"36","hashOfConfig":"25"},{"size":3880,"mtime":1653155090646,"results":"37","hashOfConfig":"25"},{"size":2719,"mtime":1653156679764,"results":"38","hashOfConfig":"25"},{"size":11124,"mtime":1653156707315,"results":"39","hashOfConfig":"25"},{"size":1758,"mtime":1653076990405,"results":"40","hashOfConfig":"25"},{"size":237,"mtime":1653076990396,"results":"41","hashOfConfig":"25"},{"size":1785,"mtime":1653076990406,"results":"42","hashOfConfig":"25"},{"size":166,"mtime":1653076990405,"results":"43","hashOfConfig":"25"},{"size":572,"mtime":1653076990394,"results":"44","hashOfConfig":"25"},{"size":484,"mtime":1653076990395,"results":"45","hashOfConfig":"25"},{"size":150,"mtime":1653076990437,"results":"46","hashOfConfig":"25"},{"size":7721,"mtime":1653147249747,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"orqic6",{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"77"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"51"},"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/index.js",[],[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/App.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/Store.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/reportWebVitals.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/HomePage.js",[],[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/AislePage.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/ProductPage.js",["124","125"],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/SellerPage.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/SignupPage.js",[],[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/CartPage.js",["126","127","128","129","130","131","132"],[],"import axios from \"axios\";\nimport { useContext, useEffect, useReducer } from \"react\";\nimport {\n  Button,\n  Card,\n  Col,\n  Container,\n  ListGroup,\n  ListGroupItem,\n  Row,\n} from \"react-bootstrap\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport logger from \"use-reducer-logger\";\nimport MessageBox from \"../components/MessageBox\";\nimport Product from \"../components/Product\";\nimport { Store } from \"../Store\";\nimport { getError } from \"../utils\";\n\nexport default function CartPage() {\n  const navigate = useNavigate();\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const {\n    cart: { cartItems },\n  } = state;\n\n  const updateCartHandler = async (item, quantity) => {\n    const { data } = await axios.get(`/api/products/${item._id}`);\n    if (data.countInStock < quantity) {\n      window.alert(\"Sorry. Product is out of stock\");\n      return;\n    }\n    ctxDispatch({\n      type: \"CART_ADD_ITEM\",\n      payload: { ...item, quantity },\n    });\n  };\n  const removeItemHandler = (item) => {\n    ctxDispatch({ type: \"CART_REMOVE_ITEM\", payload: item });\n  };\n\n  const checkoutHandler = () => {\n    navigate(\"/login?redirect=/shipping\");\n  };\n\n  const subtotal = cartItems.reduce((a, c) => a + c.price * c.quantity, 0);\n\n  return (\n    <Container className=\"rounded-border-black-bg\">\n      <Helmet>\n        <title>Shopping Cart</title>\n      </Helmet>\n\n      <Row style={{ minHeight: \"400px\" }}>\n        <Col xl={8} className=\"black-bg\">\n          {cartItems.length === 0 ? (\n            <div className=\"col2\">\n              <div className=\"cart-page-left-left-div\">\n                <img src=\"/images/shopNow.jpg\" className=\"shop-now-img\"></img>\n              </div>\n              <div className=\"cart-page-left-right-div\">\n                <h3>Your DarkRiver Cart is empty </h3> <br></br>\n                <Link to=\"/\" className=\"amzn-link \">\n                  Shop today's deal\n                </Link>\n              </div>\n            </div>\n          ) : (\n            <>\n              <ListGroup className=\"black-bg\">\n                <Row>\n                  <Col xl={6}></Col>\n                  <Col xl={6}>\n                    {\" \"}\n                    <h1 className=\"cart-page-h1-txt\">Shopping Cart</h1>\n                  </Col>\n                </Row>\n\n                {cartItems.map((item) => (\n                  <ListGroup.Item className=\"black-bg\" key={item._id}>\n                    <Row className=\"align-items-center\">\n                      <Col xl={4} className=\"black-bg\">\n                        <Link\n                         \n                          to={`/dp/${item.slug}`}\n                        >\n                          {\" \"}\n                          <img\n                            src={item.image}\n                            alt={item.name}\n                            className=\"img-fluid rounded img-thumbnail\"\n                          ></img>\n                        </Link>\n                      </Col>\n                      <Col xl={5}>\n                        <Link to={`/product/${item.slug}`} className=\"normal-ass-white-txt\"></Link>\n                        <div className=\"one-line-parent\">\n                          <p className=\"cart-page-txt\"> {item.name}</p>\n                          <p>\n                            <Link\n                              className=\"normal-ass-white-txt\"\n                              to={`/seller/${item.brand}`}\n                            >\n                              sold by <p className=\"amzn-link\">{item.brand}</p>\n                            </Link>\n                          </p>\n                          <p className=\"cart-page-txt\"> ${item.price}</p>\n                          <div className=\"one-line-child\">\n                            <Button\n                              onClick={() =>\n                                updateCartHandler(item, item.quantity - 1)\n                              }\n                              variant=\"dark\"\n                              disabled={item.quantity === 1}\n                            >\n                              <i className=\"fas fa-minus-circle\"></i>\n                            </Button>\n                            <span className=\"normal-ass-white-txt\">\n                              {item.quantity}\n                            </span>{\" \"}\n                            <Button\n                              variant=\"dark\"\n                              onClick={() =>\n                                updateCartHandler(item, item.quantity + 1)\n                              }\n                              disabled={item.quantity === item.countInStock}\n                            >\n                              <i className=\"fas fa-plus-circle\"></i>\n                            </Button>\n                          </div>\n                          <div className=\"one-line-child\">\n                            <Button\n                              onClick={() => removeItemHandler(item)}\n                              variant=\"black-bg-white-txt\"\n                            >\n                              Delete\n                            </Button>\n                          </div>\n                        </div>\n                      </Col>\n                    </Row>\n                  </ListGroup.Item>\n                ))}\n              </ListGroup>\n            </>\n          )}\n        </Col>\n        <Col xl={4}>\n          <Card className=\"black-bg\">\n            <Card.Body>\n              {cartItems.length === 0 ? (\n                <div></div>\n              ) : (\n                <ListGroup variant=\"flush\">\n                  <ListGroup.Item className=\"black-bg\">\n                    <br></br>\n                    <br></br>\n                    <h3>\n                      Subtotal ({cartItems.reduce((a, c) => a + c.quantity, 0)}{\" \"}\n                      items) : ${subtotal}\n                    </h3>\n                  </ListGroup.Item>\n                  <ListGroupItem className=\"black-bg\">\n                    {subtotal < 35 ? (\n                      <p>\n                        add ${35 - subtotal}\n                        &nbsp;of items to get free shipping\n                      </p>\n                    ) : (\n                      <p> &amp; free shipping</p>\n                    )}\n                  </ListGroupItem>\n                  <ListGroup.Item className=\"black-bg\">\n                    <div className=\"d-grid\">\n                      <Button\n                        type=\"button\"\n                        variant=\"yellow-black-txt\"\n                        onClick={checkoutHandler}\n                      >\n                        Proceed to Checkout\n                      </Button>\n                    </div>\n                  </ListGroup.Item>\n                </ListGroup>\n              )}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/AboutPage.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/PaymentMethodPage.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/ShippingPage.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/LoginPage.js",["133"],[],"import Axios from \"axios\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Store } from \"../Store\";\nimport { getError } from \"../utils\";\nimport { toast } from \"react-toastify\";\n\nexport default function LoginPage() {\n  const navigate = useNavigate();\n  const { search } = useLocation();\n  const redirectInUrl = new URLSearchParams(search).get(\"redirect\");\n  const redirect = redirectInUrl ? redirectInUrl : \"/\";\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { userInfo } = state;\n  const submitHandler = async (e) => {\n    e.preventDefault();\n    try {\n      const { data } = await Axios.post(\"/api/users/login\", {\n        email,\n        password,\n      });\n      console.log(data);\n      ctxDispatch({ type: \"USER_SIGNIN\", payload: data });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      navigate(redirect || \"/\");\n    } catch (err) {\n      alert(getError(err));\n    }\n  };\n\n  useEffect(() => {\n    if (userInfo) {\n      navigate(redirect);\n    }\n  }, [navigate, redirect, userInfo]);\n\n  return (\n    <Container fluid className=\"rounded-border-black-bg-small\">\n      <Helmet>\n        <title>Sign In</title>\n      </Helmet>\n      <h1 className=\"my-3\">Sign In</h1>\n      <Form onSubmit={submitHandler}>\n        <Form.Group className=\"mb-3\" controlId=\"email\">\n          <Form.Label>Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            required\n            onChange={(e) => setEmail(e.target.value)}\n          />\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"password\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            required\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </Form.Group>\n        <div className=\"mb-3\">\n          <div className=\"center-contents\">\n            <Button type=\"submit\" variant=\"yellow-black-txt-wide\">\n              Sign In\n            </Button>\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          New customer?{\" \"}\n          <Link to={`/signup?redirect=${redirect}`} className=\"amzn-link \">\n            Create your account\n          </Link>\n        </div>\n      </Form>\n      <br></br>\n      <p>Customer demo: johndoe@dmail.com, psw:123456</p>\n      <p>Admin demo: admin@darkriver.com, psw:123456</p>\n    </Container>\n  );\n}\n",[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/OrderDetailsPage.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/Product.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/LoadingBox.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/Rating.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/MessageBox.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/Aisle.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/components/CheckoutSteps.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/utils.js",[],[],"/Users/notAdmin/Documents/dev/DarkRiver/frontend/src/screens/Checkout.js",["134"],[],"import Axios from 'axios';\nimport React, { useContext, useEffect, useReducer } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { toast } from 'react-toastify';\nimport { Store } from '../Store';\nimport CheckoutSteps from '../components/CheckoutSteps';\nimport LoadingBox from '../components/LoadingBox';\nimport { getError } from '../utils';\nimport { Container } from 'react-bootstrap';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CREATE_REQUEST':\n      return { ...state, loading: true };\n    case 'CREATE_SUCCESS':\n      return { ...state, loading: false };\n    case 'CREATE_FAIL':\n      return { ...state, loading: false };\n    default:\n      return state;\n  }\n};\n\nexport default function Checkout() {\n  const navigate = useNavigate();\n\n  const [{ loading }, dispatch] = useReducer(reducer, {\n    loading: false,\n  });\n\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { cart, userInfo } = state;\n\n  const round2 = (num) => Math.round(num * 100 + Number.EPSILON) / 100; // 123.2345 => 123.23\n  cart.itemsPrice = round2(\n    cart.cartItems.reduce((a, c) => a + c.quantity * c.price, 0)\n  );\n  cart.shippingPrice = cart.itemsPrice >= 35 ? round2(0) : round2(10);\n  cart.taxPrice = round2(0.15 * cart.itemsPrice);\n  cart.totalPrice = cart.itemsPrice + cart.shippingPrice + cart.taxPrice;\n\n  const placeOrderHandler = async () => {\n    try {\n      dispatch({ type: 'CREATE_REQUEST' });\n\n      const { data } = await Axios.post(\n        '/api/orders',\n        {\n          orderItems: cart.cartItems,\n          shippingAddress: cart.shippingAddress,\n          paymentMethod: cart.paymentMethod,\n          itemsPrice: cart.itemsPrice,\n          shippingPrice: cart.shippingPrice,\n          taxPrice: cart.taxPrice,\n          totalPrice: cart.totalPrice,\n        },\n        {\n          headers: {\n            authorization: `Bearer ${userInfo.token}`,\n          },\n        }\n      );\n      ctxDispatch({ type: 'CART_CLEAR' });\n      dispatch({ type: 'CREATE_SUCCESS' });\n      localStorage.removeItem('cartItems');\n      navigate(`/order/${data.order._id}`);\n    } catch (err) {\n      dispatch({ type: 'CREATE_FAIL' });\n      alert.error(getError(err));\n    }\n  };\n\n  useEffect(() => {\n    if (!cart.paymentMethod) {\n      navigate('/payment');\n    }\n  }, [cart, navigate]);\n\n  return (\n    <div>\n      <CheckoutSteps step1 step2 step3 step4></CheckoutSteps>\n      <Helmet>\n        <title>Checkout</title>\n      </Helmet>\n      <Container fluid className=\"place-order-parent\">\n        <h1 className=\"my-3\" style={{ padding: \"1rem\" }}>\n          Checkout\n        </h1>\n        <Row>\n          <Col md={8}>\n            <Card className=\"black-bg\" style={{ margin: \"1rem\" }}>\n              <Card.Body>\n                <Card.Title>Shipping</Card.Title>\n                <Card.Text>\n                  <strong>Name:</strong> {cart.shippingAddress.fullName} <br />\n                  <strong>Address: </strong> {cart.shippingAddress.address},\n                  {cart.shippingAddress.city}, {cart.shippingAddress.postalCode}\n                  ,{cart.shippingAddress.country}\n                </Card.Text>\n                <Link to=\"/shipping\" className=\"amzn-link\">\n                  Edit\n                </Link>\n              </Card.Body>\n            </Card>\n            <Card className=\"black-bg\" style={{ margin: \"1rem\" }}>\n              <Card.Body>\n                <Card.Title>Payment</Card.Title>\n                <Card.Text>\n                  <strong>Method:</strong> {cart.paymentMethod}\n                </Card.Text>\n                <Link to=\"/payment\" className=\"amzn-link\">\n                  Edit\n                </Link>\n              </Card.Body>\n            </Card>\n\n            <Card className=\"black-bg\" style={{ margin: \"1rem\" }}>\n              <Card.Body>\n                <Card.Title>Items</Card.Title>\n                <ListGroup variant=\"flush\">\n                  {cart.cartItems.map((item) => (\n                    <ListGroup.Item className=\"black-bg\" key={item._id}>\n                      <Row className=\"align-items-center\">\n                        <Col md={6}>\n                          <Link\n                            className=\"normal-ass-white-txt\"\n                            to={`/dp/${item.slug}`}\n                          >\n                            <img\n                              src={item.image}\n                              alt={item.name}\n                              className=\"img-fluid rounded img-thumbnail\"\n                            ></img>{\" \"}\n                            {item.name}\n                          </Link>\n                        </Col>\n                        <Col md={3}>\n                          <span className=\"normal-ass-white-txt\">\n                            {item.quantity}\n                          </span>\n                        </Col>\n                        <Col md={3} className=\"normal-ass-white-txt\">\n                          ${item.price}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n                <Link to=\"/cart\" className=\"amzn-link\">\n                  Edit\n                </Link>\n              </Card.Body>\n            </Card>\n          </Col>\n          <Col md={4}>\n            <Card className=\"black-bg\" style={{ margin: \"1rem\" }}>\n              <Card.Body>\n                <Card.Title>Order Summary</Card.Title>\n                <ListGroup variant=\"flush\">\n                  <ListGroup.Item className=\"black-bg\">\n                    <Row className=\"normal-ass-white-txt\">\n                      <Col>Items</Col>\n                      <Col>${cart.itemsPrice.toFixed(2)}</Col>\n                    </Row>\n                  </ListGroup.Item>\n                  <ListGroup.Item className=\"black-bg\">\n                    <Row className=\"normal-ass-white-txt\">\n                      <Col>Shipping</Col>\n                      <Col>${cart.shippingPrice.toFixed(2)}</Col>\n                    </Row>\n                  </ListGroup.Item>\n                  <ListGroup.Item className=\"black-bg\">\n                    <Row className=\"normal-ass-white-txt\">\n                      <Col>Tax</Col>\n                      <Col>${cart.taxPrice.toFixed(2)}</Col>\n                    </Row>\n                  </ListGroup.Item>\n                  <ListGroup.Item className=\"black-bg\">\n                    <Row className=\"normal-ass-white-txt\">\n                      <Col>\n                        <strong> Order Total</strong>\n                      </Col>\n                      <Col>\n                        <strong>${cart.totalPrice.toFixed(2)}</strong>\n                      </Col>\n                    </Row>\n                  </ListGroup.Item>\n                  <ListGroup.Item className=\"black-bg\">\n                    <div className=\"d-grid\">\n                      <Button\n                        type=\"button\"\n                        onClick={placeOrderHandler}\n                        disabled={cart.cartItems.length === 0}\n                        variant=\"yellow-black-txt\"\n                      >\n                        Place Order\n                      </Button>\n                    </div>\n                    {loading && <LoadingBox></LoadingBox>}\n                  </ListGroup.Item>\n                </ListGroup>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n",{"ruleId":"135","severity":1,"message":"136","line":12,"column":16,"nodeType":"137","messageId":"138","endLine":12,"endColumn":24},{"ruleId":"135","severity":1,"message":"139","line":33,"column":9,"nodeType":"137","messageId":"138","endLine":33,"endColumn":17},{"ruleId":"135","severity":1,"message":"140","line":2,"column":22,"nodeType":"137","messageId":"138","endLine":2,"endColumn":31},{"ruleId":"135","severity":1,"message":"141","line":2,"column":33,"nodeType":"137","messageId":"138","endLine":2,"endColumn":43},{"ruleId":"135","severity":1,"message":"142","line":14,"column":8,"nodeType":"137","messageId":"138","endLine":14,"endColumn":14},{"ruleId":"135","severity":1,"message":"143","line":15,"column":8,"nodeType":"137","messageId":"138","endLine":15,"endColumn":18},{"ruleId":"135","severity":1,"message":"144","line":16,"column":8,"nodeType":"137","messageId":"138","endLine":16,"endColumn":15},{"ruleId":"135","severity":1,"message":"145","line":18,"column":10,"nodeType":"137","messageId":"138","endLine":18,"endColumn":18},{"ruleId":"146","severity":1,"message":"147","line":59,"column":17,"nodeType":"148","endLine":59,"endColumn":73},{"ruleId":"135","severity":1,"message":"149","line":10,"column":10,"nodeType":"137","messageId":"138","endLine":10,"endColumn":15},{"ruleId":"135","severity":1,"message":"149","line":10,"column":10,"nodeType":"137","messageId":"138","endLine":10,"endColumn":15},"no-unused-vars","'Navigate' is defined but never used.","Identifier","unusedVar","'navigate' is assigned a value but never used.","'useEffect' is defined but never used.","'useReducer' is defined but never used.","'logger' is defined but never used.","'MessageBox' is defined but never used.","'Product' is defined but never used.","'getError' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'toast' is defined but never used."]